import{_ as e,o as t,c as o,a as n}from"./app.1b12a468.js";const f=JSON.parse('{"title":"Connecting to a Fuel node","description":"","frontmatter":{},"headers":[],"relativePath":"guide/providers/connection.md","lastUpdated":1678640713000}'),a={name:"guide/providers/connection.md"},i=n('<h1 id="connecting-to-a-fuel-node" tabindex="-1">Connecting to a Fuel node <a class="header-anchor" href="#connecting-to-a-fuel-node" aria-hidden="true">#</a></h1><p>At a high level, you can use the Fuel TypeScript SDK to build applications that can run computations on the Fuel Virtual Machine through interactions with smart contracts written in Sway.</p><p>For this interaction to work, the SDK must be able to communicate with a <code>fuel-core</code> node; you have two options at your disposal:</p><ol><li>Use the <a href="./../providers/connecting-to-an-external-node.html">Testnet</a> or run a Fuel node (using <code>fuel-core</code>) and instantiate a provider that points to that node&#39;s IP and port.</li><li>Use Docker - <code>pnpm services:run</code></li><li>Use <a href="https://github.com/FuelLabs/fuelup" target="_blank" rel="noreferrer">fuelup</a></li></ol><p>The second/third options are ideal for smart contract testing, as you can quickly spin up and tear down nodes between specific test cases.</p><p>For application building, you should use the first option.</p>',6),r=[i];function c(s,d,l,p,u,h){return t(),o("div",null,r)}const m=e(a,[["render",c]]);export{f as __pageData,m as default};
