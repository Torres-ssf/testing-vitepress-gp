import{_ as s,o as a,c as e,a as n}from"./app.a85cfb4e.js";const u=JSON.parse('{"title":"Transaction parameters","description":"","frontmatter":{},"headers":[],"relativePath":"guide/contracts/transaction-parameters.md"}'),t={name:"guide/contracts/transaction-parameters.md"},o=n(`<h1 id="transaction-parameters" tabindex="-1">Transaction parameters <a class="header-anchor" href="#transaction-parameters" aria-hidden="true">#</a></h1><p>Transaction parameters are:</p><ol><li>Gas price;</li><li>Gas limit;</li><li>Maturity.</li></ol><p>You can configure these parameters by using the optional <code>TxParams</code> and passing it to a chain method called <code>txParams</code>:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">functions</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1336</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">txParams</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">gasLimit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><a class="anchor-link" href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/contract.test.ts#L117-L124" target="_blank" rel="noreferrer">See code in context </a><hr><p>If you do not pass the <code>TxParams</code>, the values default to those of the chainConfig provided to your Fuel node.</p><p>As you might have noticed already, <code>TxParams</code> can also be specified when deploying contracts or transferring assets by passing it to the respective methods.</p><blockquote><p><strong>Note:</strong> whenever you perform an action that results in a transaction (contract deployment, contract call, asset transfer), the SDK will automatically estimate the fee based on the set gas limit and the transaction&#39;s byte size. This estimation is used when building the transaction. A side-effect of this is that your wallet must at least own a single coin of the base asset of any amount.</p></blockquote>`,10),l=[o];function r(p,c,i,d,m,y){return a(),e("div",null,l)}const A=s(t,[["render",r]]);export{u as __pageData,A as default};
