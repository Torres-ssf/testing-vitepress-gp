import{d as l}from"./chunks/versions.data.212e74d8.js";import{o,c as t,b as s,d as n,a as p}from"./app.a85cfb4e.js";const r=s("h1",{id:"deploying-contracts",tabindex:"-1"},[n("Deploying contracts "),s("a",{class:"header-anchor",href:"#deploying-contracts","aria-hidden":"true"},"#")],-1),c=s("p",null,"There are two main ways of working with contracts in the SDK: deploying a contract with SDK or using the SDK to interact with existing contracts.",-1),i=s("h2",{id:"deploying-a-contract-binary",tabindex:"-1"},[n("Deploying a contract binary "),s("a",{class:"header-anchor",href:"#deploying-a-contract-binary","aria-hidden":"true"},"#")],-1),y=s("code",null,"forc build",-1),D=p(`<p>Below is how you can deploy your contracts using the SDK. For more details about each component in this process, read about <a href="./the-fuelvm-binary-file.html">the FuelVM binary file</a> and <a href="./../abi-typegen/">the JSON ABI file</a>.</p><h3 id="the-deploy-functions" tabindex="-1">The deploy functions <a class="header-anchor" href="#the-deploy-functions" aria-hidden="true">#</a></h3><p>If you are only interested in a single instance of your contract, then use <code>deploy</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Provider</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ContractFactory</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fuels</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">generateTestWallet</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@fuel-ts/wallet/test-utils</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// basic setup</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> provider </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Provider</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://127.0.0.1:4000/graphql</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> wallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generateTestWallet</span><span style="color:#A6ACCD;">(provider</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [[</span><span style="color:#F78C6C;">5_000_000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> NativeAssetId]])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// load the byteCode of the contract, generated from Sway source</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> byteCode </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">readFileSync</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../test-projects/storage-test-contract/out/debug/storage-test.bin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// load the JSON abi of the contract, generated from Sway source</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> abi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">readFileSync</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">../test-projects/storage-test-contract/out/debug/storage-test-abi.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// send byteCode and ABI to ContractFactory to load</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> factory </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContractFactory</span><span style="color:#A6ACCD;">(byteCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> abi</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> wallet)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><a class="anchor-link" href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/contract-factory.test.ts#L10-L31" target="_blank" rel="noreferrer">See code in context </a><hr><p>You can then use the contract methods very simply:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> contact </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> factory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">deployContract</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Also read about how to <a href="./../abi-typegen/generate-contract-types-from-abi.html">generate-contract-types-from-abi</a>, allowing for rich TypeScript backed Fuel usage.</p>`,9),h=JSON.parse('{"title":"Deploying contracts","description":"","frontmatter":{},"headers":[{"level":2,"title":"Deploying a contract binary","slug":"deploying-a-contract-binary","link":"#deploying-a-contract-binary","children":[{"level":3,"title":"The deploy functions","slug":"the-deploy-functions","link":"#the-deploy-functions","children":[]}]}],"relativePath":"guide/contracts/deploying-contracts.md"}'),A={name:"guide/contracts/deploying-contracts.md"},m=Object.assign(A,{setup(C){const{sway:a}=l,e=`https://fuellabs.github.io/sway/v${a}/book/introduction/index.html`;return(F,d)=>(o(),t("div",null,[r,c,i,s("p",null,[n("Once you've written a contract in Sway and compiled it with "),y,n(" (read "),s("a",{href:e,target:"_blank",rel:"noreferrer"},"here"),n(" for more on how to work with Sway), you'll have in your hands two important artifacts: the compiled binary file and the JSON ABI file.")]),D]))}});export{h as __pageData,m as default};
