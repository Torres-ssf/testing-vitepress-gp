import{_ as s,o as a,c as e,a as n}from"./app.a85cfb4e.js";const F=JSON.parse('{"title":"Bech32","description":"","frontmatter":{},"headers":[],"relativePath":"guide/types/bech32.md"}'),l={name:"guide/types/bech32.md"},o=n(`<h1 id="bech32" tabindex="-1">Bech32 <a class="header-anchor" href="#bech32" aria-hidden="true">#</a></h1><p>The <code>Bech32Address</code> enables the use of addresses and contract ids in the bech32 format (using bech32m). They can easily be converted to their counterparts using <a href="./address.html">Address</a>.</p><p>Here are the main ways of creating a <code>Bech32Address</code></p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fuels</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> address </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Address</span><span style="color:#A6ACCD;">(ADDRESS_BECH32)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(address</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toB256</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#A6ACCD;">(ADDRESS_B256)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(address</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBytes</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#A6ACCD;">(ADDRESS_BYTES)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Hex string values are equivalent to B256</span></span>
<span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(address</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toHexString</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#A6ACCD;">(ADDRESS_B256)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><a class="anchor-link" href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/doc-examples.test.ts#L42-L51" target="_blank" rel="noreferrer">See code in context </a><hr><blockquote><p><strong>Note:</strong> when using a <code>Bech32Address</code> with an <code>Address</code> the HRP (Human-Readable Part) is set to <strong>&quot;fuel&quot;</strong> per default:</p></blockquote><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Bech32Address</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">fuel</span><span style="color:#89DDFF;">\${</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><a class="anchor-link" href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/interfaces/src/index.ts#L3-L5" target="_blank" rel="noreferrer">See code in context </a>`,9),p=[o];function t(r,c,i,d,y,D){return a(),e("div",null,p)}const u=s(l,[["render",t]]);export{F as __pageData,u as default};
