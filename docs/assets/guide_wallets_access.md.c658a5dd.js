import{_ as e,o as s,c as a,a as n}from"./app.1b12a468.js";const A=JSON.parse('{"title":"Wallet Access","description":"","frontmatter":{},"headers":[{"level":2,"title":"Wallet States","slug":"wallet-states","link":"#wallet-states","children":[]},{"level":2,"title":"Basic Example","slug":"basic-example","link":"#basic-example","children":[{"level":6,"title":"See code in context","slug":"see-code-in-context","link":"#see-code-in-context","children":[]}]},{"level":2,"title":"Transitioning States","slug":"transitioning-states","link":"#transitioning-states","children":[{"level":6,"title":"See code in context","slug":"see-code-in-context-1","link":"#see-code-in-context-1","children":[]},{"level":6,"title":"See code in context","slug":"see-code-in-context-2","link":"#see-code-in-context-2","children":[]}]},{"level":2,"title":"Design Guidelines","slug":"design-guidelines","link":"#design-guidelines","children":[]}],"relativePath":"guide/wallets/access.md","lastUpdated":1678647917000}'),l={name:"guide/wallets/access.md"},t=n(`<h1 id="wallet-access" tabindex="-1">Wallet Access <a class="header-anchor" href="#wallet-access" aria-hidden="true">#</a></h1><p>The kinds of operations we can perform with a <code>Wallet</code> instance depend on whether or not we have access to the wallet&#39;s private key.</p><p>In order to differentiate between <code>Wallet</code> instances that know their private key and those that do not, we use the <code>WalletUnlocked</code> and <code>WalletLocked</code> types respectively.</p><h2 id="wallet-states" tabindex="-1">Wallet States <a class="header-anchor" href="#wallet-states" aria-hidden="true">#</a></h2><p>The <code>WalletUnlocked</code> type represents a wallet whose private key is known and stored internally in memory. A wallet must be of type <code>WalletUnlocked</code> in order to perform operations that involve <a href="./signing.html">signing messages or transactions</a>.</p><p>The <code>WalletLocked</code> type represents a wallet whose private key is <em>not</em> known or stored in memory. Instead, <code>WalletLocked</code> only knows its public address. A <code>WalletLocked</code> cannot be used to sign transactions, however it may still perform a whole suite of useful operations including listing transactions, assets, querying balances, and so on.</p><p>Note that the <code>WalletUnlocked</code> type implements most methods available on the <code>WalletLocked</code> type. In other words, <code>WalletUnlocked</code> can be thought of as a thin wrapper around <code>WalletLocked</code> that provides greater access via its private key.</p><h2 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Wallet</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WalletLocked</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">WalletUnlocked</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fuels</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// use the \`generate\` helper to make an Unlocked Wallet</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> myWallet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WalletUnlocked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or use an Address to create a wallet</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> someWallet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WalletLocked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromAddress</span><span style="color:#A6ACCD;">(myWallet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h6 id="see-code-in-context" tabindex="-1"><a href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/doc-examples.test.ts#L155-L163" target="_blank" rel="noreferrer">See code in context</a> <a class="header-anchor" href="#see-code-in-context" aria-hidden="true">#</a></h6><h2 id="transitioning-states" tabindex="-1">Transitioning States <a class="header-anchor" href="#transitioning-states" aria-hidden="true">#</a></h2><p>A <code>WalletLocked</code> instance can be unlocked by providing the private key:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> lockedWallet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WalletLocked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromAddress</span><span style="color:#A6ACCD;">(myWallet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// unlock an existing wallet</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> unlockedWallet</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WalletUnlocked</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lockedWallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlock</span><span style="color:#A6ACCD;">(PRIVATE_KEY)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// or directly from a private key</span></span>
<span class="line"><span style="color:#A6ACCD;">unlockedWallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Wallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromPrivateKey</span><span style="color:#A6ACCD;">(PRIVATE_KEY)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h6 id="see-code-in-context-1" tabindex="-1"><a href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/doc-examples.test.ts#L167-L175" target="_blank" rel="noreferrer">See code in context</a> <a class="header-anchor" href="#see-code-in-context-1" aria-hidden="true">#</a></h6><p>A <code>WalletUnlocked</code> instance can be locked using the <code>lock</code> method:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newlyLockedWallet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> unlockedWallet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lock</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h6 id="see-code-in-context-2" tabindex="-1"><a href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/doc-examples.test.ts#L177-L179" target="_blank" rel="noreferrer">See code in context</a> <a class="header-anchor" href="#see-code-in-context-2" aria-hidden="true">#</a></h6><p>Most wallet constructors that create or generate a new wallet are provided on the <code>WalletUnlocked</code> type. Consider <code>lock</code>ing the wallet after the new private key has been handled in order to reduce the scope in which the wallet&#39;s private key is stored in memory.</p><h2 id="design-guidelines" tabindex="-1">Design Guidelines <a class="header-anchor" href="#design-guidelines" aria-hidden="true">#</a></h2><p>When designing APIs that accept a wallet as an input, we should think carefully about the kind of access that we require. API developers should aim to minimise their usage of <code>WalletUnlocked</code> in order to ensure private keys are stored in memory no longer than necessary to reduce the surface area for attacks and vulnerabilities in downstream libraries and applications.</p>`,20),o=[t];function c(p,r,i,d,y,h){return s(),a("div",null,o)}const F=e(l,[["render",c]]);export{A as __pageData,F as default};
