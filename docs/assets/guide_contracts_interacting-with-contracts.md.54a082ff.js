import{_ as s,o as n,c as a,a as e}from"./app.a85cfb4e.js";const d=JSON.parse('{"title":"Interacting with contracts","description":"","frontmatter":{},"headers":[],"relativePath":"guide/contracts/interacting-with-contracts.md"}'),t={name:"guide/contracts/interacting-with-contracts.md"},o=e(`<h1 id="interacting-with-contracts" tabindex="-1">Interacting with contracts <a class="header-anchor" href="#interacting-with-contracts" aria-hidden="true">#</a></h1><p>If you already have a deployed contract and want to call its methods using the SDK, but without deploying it again, all you need is the contract ID of your deployed contract. You can skip the whole deployment setup and just start using it:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> provider </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Provider</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://127.0.0.1:4000/graphql</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> providerContract </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Contract</span><span style="color:#A6ACCD;">(contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> contract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">interface</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> provider)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> value </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> providerContract</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">functions</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">counter</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toHex</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">toHex</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1300</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><a class="anchor-link" href="https://github.com/FuelLabs/fuels-ts/blob/master/packages/fuel-gauge/src/storage-test-contract.test.ts#L46-L51" target="_blank" rel="noreferrer">See code in context </a><hr><p>The above example assumes that your contract id string is encoded in the bech32m format. You can recognize it by the human-readable-part &quot;fuel&quot; followed by the separator &quot;1&quot;. However, when using other Fuel tools, you might end up with a hex-encoded contract id string. A <a href="./../types/contract-id.html">Contract ID</a> can easily be converted to and from other Address formats, see the <a href="./../types/conversion.html">conversion guide</a> for more information.</p><div class="language-typescript:line-numbers line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript:line-numbers</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">const contract: Contract = new Contract(new Address(ADDRESS_BECH32), abiJSON);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const contract: Contract = new Contract(Address.fromPublicKey(KEY), abiJSON);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">const contract: Contract = new Contract(Address.fromB256(hexedB256), abiJSON);</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>You can learn more about the Fuel SDK bech32 type <a href="./../types/bech32.html">here</a>.</p>`,8),l=[o];function p(r,c,i,y,A,C){return n(),a("div",null,l)}const u=s(t,[["render",p]]);export{d as __pageData,u as default};
