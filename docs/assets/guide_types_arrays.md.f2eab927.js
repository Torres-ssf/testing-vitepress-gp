import{_ as s,o as a,c as n,a as e}from"./app.a85cfb4e.js";const C=JSON.parse('{"title":"Arrays","description":"","frontmatter":{},"headers":[{"level":2,"title":"Passing in arrays","slug":"passing-in-arrays","link":"#passing-in-arrays","children":[]},{"level":2,"title":"Vectors","slug":"vectors","link":"#vectors","children":[]}],"relativePath":"guide/types/arrays.md"}'),r={name:"guide/types/arrays.md"},l=e(`<h1 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-hidden="true">#</a></h1><h2 id="passing-in-arrays" tabindex="-1">Passing in arrays <a class="header-anchor" href="#passing-in-arrays" aria-hidden="true">#</a></h2><p>You can pass a JavaScript <code>Array</code> into your contract method transparently, allowing passthrough of expected data via the type regardless of Array type. An Array in Sway is fixed in size, so maximum storage size is determined at time of program compile, not during runtime.</p><p>An Array is just a Typed Array:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// aka [u8; 2]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> basicNumberArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// aka [bool; 4]</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> basicBooleanArray </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="vectors" tabindex="-1">Vectors <a class="header-anchor" href="#vectors" aria-hidden="true">#</a></h2><p>If your Array size is unknown until runtime, you can also use <a href="./vectors.html">Vectors</a>.</p>`,7),t=[l];function o(p,i,c,y,d,A){return a(),n("div",null,t)}const h=s(r,[["render",o]]);export{C as __pageData,h as default};
