import{_ as e,o as s,c as n,U as a}from"./app.13a25981.js";import"./chunks/theme.c66773c8.js";const m=JSON.parse('{"title":"Enums","description":"","frontmatter":{},"headers":[{"level":2,"title":"Options","slug":"options","link":"#options","children":[]}],"relativePath":"guide/types/enums-and-options.md","lastUpdated":1678564845000}'),t={name:"guide/types/enums-and-options.md"},o=a(`<h1 id="enums" tabindex="-1">Enums <a class="header-anchor" href="#enums" aria-hidden="true">#</a></h1><p>Here are some examples of <code>Enums</code> in Sway:</p><p>And the same structures represented in TypeScript, note that an <code>Enum</code> is essentially an <code>Object</code> in TypeScript.</p><p>Here is <code>SmallEnum</code></p><p>Here is <code>BigEnum</code></p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h2><p>Sway supports the concept of the <code>Option</code> container, which allows for a variable to be either set with an expected value or to be exclusively marked as &quot;no-value&quot; (with an <code>undefined</code> in the case of TypeScript).</p><p>The <code>Option</code> is a special wrapper type of <code>Enum</code>.</p><p>This example shows that an input param with type <code>OptionalStringInput</code> can either be a <code>string</code> value or <code>undefined</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OptionalStringInput</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Option</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> someInput</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OptionalStringInput</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dogs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> noneInput</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OptionalStringInput</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span>
<span class="line"></span></code></pre></div><p>To help us understand how the TS-SDK handles Optional params, take this Sway method that expects three optional params which it attempts to add together.</p><p>Using this Contract, our Optional params can either be the values expected, like so:</p><p>Or we can supply a partial list, where unsupplied values are converted to <code>Option&lt;None&gt;</code> (or <code>undefined</code>):</p>`,13),p=[o];function l(c,r,i,d,u,h){return s(),n("div",null,p)}const C=e(t,[["render",l]]);export{m as __pageData,C as default};
