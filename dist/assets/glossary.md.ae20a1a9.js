import{_ as e,o as t,c as a,a as r}from"./app.a85cfb4e.js";const _=JSON.parse('{"title":"Glossary","description":"","frontmatter":{},"headers":[{"level":2,"title":"Contract","slug":"contract","link":"#contract","children":[]},{"level":2,"title":"Provider","slug":"provider","link":"#provider","children":[]},{"level":2,"title":"Wallet and signer","slug":"wallet-and-signer","link":"#wallet-and-signer","children":[]}],"relativePath":"glossary.md"}'),n={name:"glossary.md"},o=r('<h1 id="glossary" tabindex="-1">Glossary <a class="header-anchor" href="#glossary" aria-hidden="true">#</a></h1><p>These are the common terms you will find across this documentation and while using the SDK.</p><h2 id="contract" tabindex="-1">Contract <a class="header-anchor" href="#contract" aria-hidden="true">#</a></h2><p>A contract, in the SDK, is an abstraction that represents a connection to a specific smart contract deployed on the Fuel Network. This contract instance can be used as a regular JS object, with methods attached to it that reflect those in its smart contract equivalent.</p><h2 id="provider" tabindex="-1">Provider <a class="header-anchor" href="#provider" aria-hidden="true">#</a></h2><p>A Provider is a Class that provides an abstraction for a connection to a Fuel node. It provides read-only access to the node. You can use this provider as-is or through the wallet.</p><h2 id="wallet-and-signer" tabindex="-1">Wallet and signer <a class="header-anchor" href="#wallet-and-signer" aria-hidden="true">#</a></h2><p>A <code>Wallet</code> is a Class with direct or indirect access to a private key. You can use a <code>Wallet</code> to sign messages and transactions to authorize the network to charge your account to perform operations. The terms wallet and signer in the SDK are often used interchangeably, but, technically, a <code>Signer</code> enables the signing of transactions and messages; the <code>Wallet</code> implements the <code>Signer</code> functionality.</p>',8),s=[o];function i(c,d,l,h,p,u){return t(),a("div",null,s)}const m=e(n,[["render",i]]);export{_ as __pageData,m as default};
