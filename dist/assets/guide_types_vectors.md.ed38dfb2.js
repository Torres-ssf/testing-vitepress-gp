import{_ as e,o as t,c as s,U as a}from"./app.13a25981.js";import"./chunks/theme.c66773c8.js";const v=JSON.parse('{"title":"Vectors","description":"","frontmatter":{},"headers":[{"level":2,"title":"Passing in vectors","slug":"passing-in-vectors","link":"#passing-in-vectors","children":[]},{"level":2,"title":"Returning vectors","slug":"returning-vectors","link":"#returning-vectors","children":[]}],"relativePath":"guide/types/vectors.md","lastUpdated":1678564845000}'),o={name:"guide/types/vectors.md"},n=a(`<h1 id="vectors" tabindex="-1">Vectors <a class="header-anchor" href="#vectors" aria-hidden="true">#</a></h1><h2 id="passing-in-vectors" tabindex="-1">Passing in vectors <a class="header-anchor" href="#passing-in-vectors" aria-hidden="true">#</a></h2><p>You can pass a JavaScript <code>Array</code> into your contract method transparently, allowing passthrough of expected data via the type regardless of Array type.</p><p>A basic Vector is just a Typed Array:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// aka Vec&lt;u8&gt;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> basicNumberVector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>Here is an example of a sample <code>struct</code> in Sway:</p><p>And the contract method using this <code>struct</code> in a <code>Vector</code>:</p><p>The following code calls this Sway contract method which accepts a <code>Vec&lt;ComplexStruct&gt;</code>.</p><p>You can use a vector just like you would use any other type -- e.g. a <code>[Vec&lt;u32&gt;; 2]</code> or a <code>SomeStruct&lt;Vec&lt;Bits256&gt;&gt;</code> etc.</p><h2 id="returning-vectors" tabindex="-1">Returning vectors <a class="header-anchor" href="#returning-vectors" aria-hidden="true">#</a></h2><p>This is currently not supported. If you try returning a type that is or contains a vector you will get a compile time error.</p>`,11),r=[n];function c(l,p,i,d,u,h){return t(),s("div",null,r)}const _=e(o,[["render",c]]);export{v as __pageData,_ as default};
